{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// TODO: 1) spring 보내준 user 객체(웹토큰있음)를 로컬스토리지에 저장\n// TODO:   사용법 :  localStorage.setItem(키, 값);\n// TODO:     => 단, 값은 문자열만 저장됨\n// TODO:   사용법 : JSON.stringify(객체) => 문자열로 바뀐 객체가 리턴됨\n\n// TODO: 2) 공유저장소의 state / mutations 함수 접근법\n// TODO:   mutations 사용법 : this.$store.commit(\"함수명\", 저장할객체)\n// TODO:     => 로그인성공 공유함수(loginSuccess(state, 유저객체)) 실행\n// TODO:   state 사용법 : this.$store.state.공유속성명\n// TODO:     => 공유저장소의 공유속성 접근법\n\n// TODO: 3) 뷰의 라이프사이클\n// TODO:   - mounted() : 화면이 뜰때 자동 실행 (생명주기 함수)\n// TODO:   - created() : 뷰가 생성될대 자동 실행\n// TODO:   - created()(1번, 뷰만 생성되면 실행) -> mounted()(2번, html 태그까지 모두 뜰때)\n// TODO:     예) destoryed() : 뷰가 삭제될때 실행 (거의 사용 않함)\n\nimport AuthService from \"@/services/auth/AuthService\";\nexport default {\n  data() {\n    return {\n      user: {\n        email: \"\",\n        // 로그인ID\n        password: \"\"\n      }\n    };\n  },\n  methods: {\n    async login() {\n      try {\n        let response = await AuthService.login(this.user);\n        console.log(response.data);\n        localStorage.setItem(\"user\", JSON.stringify(response.data)); // 1)\n\n        this.$store.commit(\"loginSuccess\", response.data); // 2)\n\n        this.$router.push(\"/\");\n      } catch (e) {\n        this.$store.commit(\"loginFailure\");\n        console.log(e);\n      }\n    }\n  },\n  // 화면이 뜰때 실행되는 함수\n  created() {\n    if (this.$store.state.loggedIn == true) {\n      // 로그인 상태이면 로그인 불필요\n      this.$router.push(\"/\");\n    }\n  }\n};","map":{"version":3,"names":["AuthService","data","user","email","password","methods","login","response","console","log","localStorage","setItem","JSON","stringify","$store","commit","$router","push","e","created","state","loggedIn"],"sources":["/Users/kangtaegyung/GitHub/social-login-multiple-providers/frontend-vue/src/views/auth/LoginView.vue"],"sourcesContent":["<!-- 사용법 : @submit.prevent=\"함수\" -->\r\n<!--       prevent : submit 의 기본 속성을 막기(다른 곳으로 이동하려는 특징)  -->\r\n\r\n<template>\r\n  <div>\r\n    <div class=\"row justify-content-center\">\r\n      <div class=\"col-xl-10 col-lg-12 col-md-9\">\r\n        <div class=\"card mt-5\">\r\n          <div class=\"card-body p-0\">\r\n            <!-- {/* Nested Row within Card Body */} -->\r\n            <div class=\"row\">\r\n              <div class=\"col-lg-6 bg-login-image\"></div>\r\n              <div class=\"col-lg-6\">\r\n                <div class=\"p-5\">\r\n                  <div class=\"text-center\">\r\n                    <h1 class=\"h4 mb-4\">Welcome Back!</h1>\r\n                  </div>\r\n                  <form class=\"user\" @submit.prevent=\"login\">\r\n                    <div class=\"form-group\">\r\n                      <input\r\n                        type=\"email\"\r\n                        class=\"form-control form-control-user mb-3\"\r\n                        placeholder=\"이메일을 넣기\"\r\n                        name=\"email\"\r\n                        v-model=\"user.email\"\r\n                      />\r\n                    </div>\r\n                    <div class=\"form-group\">\r\n                      <input\r\n                        type=\"password\"\r\n                        class=\"form-control form-control-user mb-3\"\r\n                        placeholder=\"패스워드 넣기\"\r\n                        name=\"password\"\r\n                        v-model=\"user.password\"\r\n                      />\r\n                    </div>\r\n\r\n                    <button class=\"btn btn-primary btn-user w-100 mb-3\">\r\n                      Login\r\n                    </button>\r\n                    <hr />\r\n                    <a\r\n                      href=\"http://localhost:8000/oauth2/authorization/google\"\r\n                      class=\"btn btn-google btn-user w-100 mb-2\"\r\n                    >\r\n                      <i class=\"fab fa-google fa-fw\"></i>&nbsp;Login with Google\r\n                    </a>\r\n                    <a href=\"http://localhost:8000/oauth2/authorization/naver\" class=\"btn btn-naver btn-user w-100 mb-2\">\r\n                      <i class=\"fa-solid fa-n\"></i>&nbsp;Login with Naver\r\n                    </a>\r\n                    <a href=\"/\" class=\"btn btn-kakao btn-user w-100 mb-3\">\r\n                      <i class=\"fa-solid fa-k\"></i>&nbsp;Login with Kakao\r\n                    </a>\r\n                  </form>\r\n                  <hr />\r\n                  <div class=\"text-center\">\r\n                    <a class=\"small\" href=\"/forgot-password\">\r\n                      Forgot Password?\r\n                    </a>\r\n                  </div>\r\n                  <div class=\"text-center\">\r\n                    <a class=\"small\" href=\"/register\"> Create an Account! </a>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n<script>\r\n// TODO: 1) spring 보내준 user 객체(웹토큰있음)를 로컬스토리지에 저장\r\n// TODO:   사용법 :  localStorage.setItem(키, 값);\r\n// TODO:     => 단, 값은 문자열만 저장됨\r\n// TODO:   사용법 : JSON.stringify(객체) => 문자열로 바뀐 객체가 리턴됨\r\n\r\n// TODO: 2) 공유저장소의 state / mutations 함수 접근법\r\n// TODO:   mutations 사용법 : this.$store.commit(\"함수명\", 저장할객체)\r\n// TODO:     => 로그인성공 공유함수(loginSuccess(state, 유저객체)) 실행\r\n// TODO:   state 사용법 : this.$store.state.공유속성명\r\n// TODO:     => 공유저장소의 공유속성 접근법\r\n\r\n// TODO: 3) 뷰의 라이프사이클\r\n// TODO:   - mounted() : 화면이 뜰때 자동 실행 (생명주기 함수)\r\n// TODO:   - created() : 뷰가 생성될대 자동 실행\r\n// TODO:   - created()(1번, 뷰만 생성되면 실행) -> mounted()(2번, html 태그까지 모두 뜰때)\r\n// TODO:     예) destoryed() : 뷰가 삭제될때 실행 (거의 사용 않함)\r\n\r\nimport AuthService from \"@/services/auth/AuthService\";\r\nexport default {\r\n  data() {\r\n    return {\r\n      user: {\r\n        email: \"\", // 로그인ID\r\n        password: \"\",\r\n      },\r\n    };\r\n  },\r\n  methods: {\r\n    async login() {\r\n      try {\r\n        let response = await AuthService.login(this.user);\r\n        console.log(response.data);\r\n\r\n        localStorage.setItem(\"user\", JSON.stringify(response.data)); // 1)\r\n\r\n        this.$store.commit(\"loginSuccess\", response.data); // 2)\r\n\r\n        this.$router.push(\"/\");\r\n      } catch (e) {\r\n        this.$store.commit(\"loginFailure\");\r\n\r\n        console.log(e);\r\n      }\r\n    },\r\n  },\r\n  // 화면이 뜰때 실행되는 함수\r\n  created() {\r\n    if (this.$store.state.loggedIn == true) {\r\n      // 로그인 상태이면 로그인 불필요\r\n      this.$router.push(\"/\");\r\n    }\r\n  },\r\n};\r\n</script>\r\n<style>\r\n@import \"@/assets/css/login.css\";\r\n</style>\r\n"],"mappings":";AAyEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,WAAU,MAAO,6BAA6B;AACrD,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,IAAI,EAAE;QACJC,KAAK,EAAE,EAAE;QAAE;QACXC,QAAQ,EAAE;MACZ;IACF,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP,MAAMC,KAAKA,CAAA,EAAG;MACZ,IAAI;QACF,IAAIC,QAAO,GAAI,MAAMP,WAAW,CAACM,KAAK,CAAC,IAAI,CAACJ,IAAI,CAAC;QACjDM,OAAO,CAACC,GAAG,CAACF,QAAQ,CAACN,IAAI,CAAC;QAE1BS,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACN,QAAQ,CAACN,IAAI,CAAC,CAAC,EAAE;;QAE7D,IAAI,CAACa,MAAM,CAACC,MAAM,CAAC,cAAc,EAAER,QAAQ,CAACN,IAAI,CAAC,EAAE;;QAEnD,IAAI,CAACe,OAAO,CAACC,IAAI,CAAC,GAAG,CAAC;MACxB,EAAE,OAAOC,CAAC,EAAE;QACV,IAAI,CAACJ,MAAM,CAACC,MAAM,CAAC,cAAc,CAAC;QAElCP,OAAO,CAACC,GAAG,CAACS,CAAC,CAAC;MAChB;IACF;EACF,CAAC;EACD;EACAC,OAAOA,CAAA,EAAG;IACR,IAAI,IAAI,CAACL,MAAM,CAACM,KAAK,CAACC,QAAO,IAAK,IAAI,EAAE;MACtC;MACA,IAAI,CAACL,OAAO,CAACC,IAAI,CAAC,GAAG,CAAC;IACxB;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}